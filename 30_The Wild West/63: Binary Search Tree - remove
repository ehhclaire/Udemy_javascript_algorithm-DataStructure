class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
  constructor() {
    this.root = null;
  }

  insert(value) {
    if (this.root === null) {
      this.root = new Node(value);
      return this;
    } else {
      let current = this.root;
      while (true) {
        if (value < current.value) {
          if (current.left === null) {
            current.left = new Node(value);
            return this;
          } else {
            current = current.left;
          }
        } else if (value > current.value) {
          if (current.right === null) {
            current.right = new Node(value);
            return this;
          } else {
            current = current.right;
          }
        } else {
          // value is equal to current.value, handle duplicates as desired
          return this;
        }
      }
    }
  }

  remove(value) {
    const removeNode = (node, value) => {
      if (node === null) {
        return null;
      }

      if (value === node.value) {
        if (node.left === null && node.right === null) {
          return null;
        }

        if (node.left === null) {
          return node.right;
        }

        if (node.right === null) {
          return node.left;
        }

        let tempNode = node.right;
        while (tempNode.left !== null) {
          tempNode = tempNode.left;
        }

        node.value = tempNode.value;
        node.right = removeNode(node.right, tempNode.value);
        return node;
      } else if (value < node.value) {
        node.left = removeNode(node.left, value);
        return node;
      } else {
        node.right = removeNode(node.right, value);
        return node;
      }
    };

    this.root = removeNode(this.root, value);
  }
}

// Test cases
let binarySearchTree = new BinarySearchTree();
binarySearchTree
  .insert(15)
  .insert(20)
  .insert(10)
  .insert(12)
  .insert(1)
  .insert(5)
  .insert(50);
binarySearchTree.remove(50);
console.log(binarySearchTree.root.right.value); // 20
console.log(binarySearchTree.root.right.right); // null

binarySearchTree.remove(5);
console.log(binarySearchTree.root.left.left.value); // 1
console.log(binarySearchTree.root.left.left.right); // null

binarySearchTree = new BinarySearchTree();
binarySearchTree
  .insert(15)
  .insert(20)
  .insert(10)
  .insert(12)
  .insert(1)
  .insert(5)
  .insert(50);

binarySearchTree.remove(1);
console.log(binarySearchTree.root.left.left.value); // 5
console.log(binarySearchTree.root.left.left.left); // null
console.log(binarySearchTree.root.left.left.right); // null

binarySearchTree.remove(20);
console.log(binarySearchTree.root.right.value); // 50
console.log(binarySearchTree.root.right.right); // null
console.log(binarySearchTree.root.right.left); // null

binarySearchTree = new BinarySearchTree();
binarySearchTree
  .insert(15)
  .insert(20)
  .insert(10)
  .insert(12)
  .insert(1)
  .insert(5)
  .insert(50)
  .insert(60)
  .insert(30)
  .insert(25)
  .insert(23)
  .insert(24)
  .insert(70);

binarySearchTree.remove(10);
console.log(binarySearchTree.root.left.value); // 12
console.log(binarySearchTree.root.left.left.value); // 1
console.log(binarySearchTree.root.left.left.right.value); // 5

binarySearchTree.remove(50);
console.log(binarySearchTree.root.right.value); // 20
console.log(binarySearchTree.root.right.right.value); // 60
console.log(binarySearchTree.root.right.right.left.value); // 30

binarySearchTree = new BinarySearchTree();
binarySearchTree
  .insert(22)
  .insert(49)
  .insert(85)
  .insert(66)
  .insert(95)
  .insert(90)
  .insert(100)
  .insert(88)
  .insert(93)
  .insert(89);

binarySearchTree.remove(85);
console.log(binarySearchTree.root.right.right.value); // 88
console.log(binarySearchTree.root.right.right.right.left.left.value); // 89
